// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String
  accounts      Account[]
  sessions      Session[]
  proposta      Proposta[]
}

model Invite {
  id    String @id @default(cuid())
  email String
}

model Proposta {
  id          String     @id @unique
  criadoPor   User       @relation(fields: [criadoPorId], references: [id])
  criadoPorId String
  dataCriacao DateTime   @default(now())
  edificios   Edificio[]
}

model FotoEspaco {
  id              Int      @id @default(autoincrement())
  caminhoRelativo String
  espaco          Espaco   @relation(fields: [espacoId], references: [id])
  espacoId        Int
  dataCriacao     DateTime @default(now())
  tipo            TipoFoto
}

enum TipoFoto {
  Espaco
  Iluminacao
  Equipamento
}

model Espaco {
  id                Int              @id @default(autoincrement())
  designacao        String?
  peDireito         Float?
  climatizado       Boolean?
  ocupacao          Int?
  util              Boolean?
  tipoEquipamento   TipoEquipamento? @relation(fields: [tipoEquipamentoId], references: [id])
  tipoEquipamentoId Int?
  tipoAtividade     TipoAtividade?
  piso              Piso?            @relation(fields: [pisoId], references: [id])
  pisoId            Int?
  edificio          Edificio?        @relation(fields: [edificioId], references: [id])
  edificioId        Int?
  dataCriacao       DateTime         @default(now())
  fotosEspaco       FotoEspaco[]
}

model Piso {
  id         Int      @id @unique @default(autoincrement())
  nome       String
  espacos    Espaco[]
  Edificio   Edificio @relation(fields: [edificioId], references: [id])
  edificioId Int
}

model Edificio {
  id         Int       @id @default(autoincrement())
  designacao String
  descricao  String
  proposta   Proposta? @relation(fields: [propostaId], references: [id])
  propostaId String?
  pisos      Piso[]
  espacos    Espaco[]
}

model TipoEquipamento {
  id         Int      @id @default(autoincrement())
  designacao String
  descricao  String
  espacos    Espaco[]
}

enum TipoAtividade {
  Sono
  Descanso
  Sedentaria
  Moderada
  LigeiramenteAlta
  Alta
}
